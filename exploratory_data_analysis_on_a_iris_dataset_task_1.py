# -*- coding: utf-8 -*-
"""Exploratory Data Analysis on a Iris Dataset-Task 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KuaubHKVMzm5TxqvtIrYj3ugH3hG7jyP

# **Importing Neccessary libraries and loading data**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/content/iris_flo.data.csv')
print(df)

df.head()

df.describe()

"""# **Exploratory Data Analysis using iris data**




"""

from sklearn.preprocessing import LabelEncoder
label_encoder=LabelEncoder()
df['Species']=label_encoder.fit_transform(df['Species'])
print(df)

print(df.columns)

df=pd.get_dummies(df,columns=['Species'],dtype=int)
print(df)
print(df.astype(int))

from sklearn.preprocessing import OneHotEncoder
import pandas as pd

# Initialize the OneHotEncoder
encoder = OneHotEncoder()

# Fit and transform the data
encoded_data = encoder.fit_transform(df[['sepal length', 'sepal width', 'petal length', 'petal width']])

# Convert the encoded data to a DataFrame
df_encoded = pd.DataFrame(encoded_data.toarray(), columns=encoder.get_feature_names_out(['sepal length', 'sepal width', 'petal length', 'petal width']))

print(df_encoded)

df.isna()

print(df.isnull())
print(df.isnull().sum())
print(df.fillna("Species"))

df['petal_sepal_lratio'] = df['petal length'] / df['sepal length']
print(df[['petal_sepal_lratio']])
df['petal_sepal_wratio']= df['petal width'] / df['sepal width']
print(df[['petal_sepal_wratio']])

"""# **Visualizing the dataset using the insights**


"""

plt.figure(figsize=(10,5))
plt.subplot(1, 2, 1)
sns.scatterplot(data=df, x='petal_sepal_lratio', y='Species', hue='Species', palette='Set1')
plt.title('Petal/Sepal Length Ratio by Species')
plt.xlabel('Petal/Sepal Length Ratio')
plt.ylabel('Species')

# Scatter plot for petal_sepal_wratio
plt.subplot(1, 2, 2)
sns.scatterplot(data=df, x='petal_sepal_wratio', y='Species', hue='Species', palette='Set2')
plt.title('Petal/Sepal Width Ratio by Species')
plt.xlabel('Petal/Sepal Width Ratio')
plt.ylabel('Species')

plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with the Iris dataset
df=pd.read_csv('/content/iris_flo.data.csv')
# Pairplot to visualize relationships between features colored by 'Species'
sns.pairplot(df, hue='Species')
plt.show()

# Boxplot to visualize the distribution of each feature for each species
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Species', y='sepal length')
plt.title('Distribution of Sepal Length by Species')
plt.show()

# Violinplot to visualize the distribution of each feature for each species
plt.figure(figsize=(8, 4))
sns.violinplot(data=df, x='Species', y='petal width')
plt.title('Distribution of Petal Width by Species')
plt.show()

#Distribution of petal length with species
plt.figure(figsize=(8,4))
sns.violinplot(data=df, x='Species', y='petal length')
plt.title('Distribution petal length with species')
plt.show()
#Distributon of sepal width with species
plt.figure(figsize=(8,4))
sns.violinplot(data=df, x='Species', y='sepal width')
plt.title('Distribution of sepal width with species')
plt.show()
#Distribution of sepal length with species
plt.figure(figsize=(8,4))
sns.violinplot(data=df, x='Species', y='sepal length')
plt.title('Distribution of sepal length with species')
plt.show()

setosa = df[df['Species'] == 'Iris-setosa']['sepal length']
versicolor = df[df['Species'] == 'Iris-versicolor']['sepal length']
virginica = df[df['Species'] == 'Iris-virginica']['sepal length']

# Plot the histograms
plt.hist([setosa, versicolor, virginica], bins=10, color=['blue', 'orange', 'green'], label=['Setosa', 'Versicolor', 'Virginica'])

# Add labels and title
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')
plt.title('Histogram of Sepal Length by Species')

# Add legend
plt.legend()

# Show plot
plt.show()

# Pie chart for the distribution of species
species_counts = df['Species'].value_counts()
labels = species_counts.index
sizes = species_counts.values

plt.figure(figsize=(3, 3))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Species in Iris Dataset')
plt.axis('equal')
plt.show()

# Bar chart for the counts of each species
plt.figure(figsize=(6, 4))
plt.bar(labels, sizes, color='skyblue')
plt.xlabel('Species')
plt.ylabel('Counts')
plt.title('Counts of Each Species in Iris Dataset')
plt.show()

import plotly.graph_objects as go
species_counts = df['Species'].value_counts()
labels = species_counts.index
sizes = species_counts.values

fig = go.Figure(data=[go.Pie(labels=labels, values=sizes)])

# Update layout for 3D effect
fig.update_layout(width=400, height=300, autosize=False,
                  scene=dict(aspectmode='data'), title='Distribution of Species ')


# Show the plot
fig.show()

numeric_df = df.drop(columns=['Species'])
corr = numeric_df.corr()
plt.figure(figsize=(8,6))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f', annot_kws={'size':10})
plt.title('Correlatoin of heatmap on Iris dataset')
plt.show()